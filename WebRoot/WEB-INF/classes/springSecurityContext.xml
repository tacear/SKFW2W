<?xml version="1.0" encoding="UTF-8"?>

	<!-- Spring namespace-based configuration -->

<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:zksp="http://www.zkoss.org/2008/zkspring"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.0.xsd
						http://www.springframework.org/schema/aop   
						http://www.springframework.org/schema/aop/spring-aop-3.0.xsd                        
                        http://www.zkoss.org/2008/zkspring http://www.zkoss.org/2008/zkspring/zkspring.xsd">



	<!-- ====================================================== -->
	<!--      For catching the @Secured annotation methods      -->
	<!--                we use our own mechanism.               -->
	<!--      Look in GFCBaseCtrl.java onEvent() method.        -->
	<!-- ====================================================== -->

	<!-- Enable the @Secured annotation to secure service layer methods -->
	<global-method-security secured-annotations="enabled" />

	<http auto-config="true">

		<!-- ====================================================== -->
		<!--       If we have our own LoginPage. So we must         -->
		<!--         tell Spring the name and the place.            -->
		<!--          In our case we take the same page             -->
		<!--         for a error message by a failure.              -->
		<!--      Further the page after a successfully login.      -->
		<!-- ====================================================== -->
			<!--  authentication-failure-url="/AuthenticationFailureServlet"-->
		<form-login login-page="/login.zul"
			authentication-failure-handler-ref="authErrorHandler"
			default-target-url="/" />
		<!-- ====================================================== -->
		<!--        Tell Spring where it goes after logout.         -->
		<!--              logout-url is a action url.               -->
		<!-- ====================================================== -->
		<!--  <logout logout-url="/j_spring_logout" logout-success-url="/index.zul" />-->
		<logout logout-url="/j_spring_logout" logout-success-url="/" />

		<!-- ====================================================== -->
		<!--      Define the pages that are to be intercepted       -->
		<!--       It is parsed from top to bottom. Means that      -->
		<!--      the most specific pattern is standing on TOP      -->
		<!--            and the CATCH ALL is on BOTTOM!             -->
		<!-- ====================================================== -->
		<intercept-url pattern="/pages/**" access="IS_AUTHENTICATED_REMEMBERED" />
		<intercept-url pattern="/WEB-INF/pages/**" access="IS_AUTHENTICATED_REMEMBERED" />

		<!-- ====================================================== -->
		<!--      The root page is accessible by everyone but       -->
		<!--           internally spring makes a login and          -->
		<!--            this user becames a UserDetails             -->
		<!--       (in there are the ip-address and others)         -->
		<!-- ====================================================== -->
		<intercept-url pattern="/**" access="IS_AUTHENTICATED_ANONYMOUSLY" />

		<!-- ====================================================== -->
		<!--                 Per user one session !!                -->
		<!--               In DEMO mode we set it to 5              -->
		<!-- ====================================================== -->
<!--		<concurrent-session-control max-sessions="5" />-->
	</http>

	<!-- ====================================================== -->
	<!--     We define the kind of authentification with a      -->
	<!--           so called authentication-provider            -->
	<!--        We use the DAO authenticationProvider.          -->
	<!--     We coded out a custom UserDetailServiceImpl.       -->
	<!--     So we have our users stored in a DB we use         -->
	<!--     our own user-service class and point to her.       -->
	<!-- ====================================================== -->
	<authentication-manager alias="authenticationManager">
		<authentication-provider user-service-ref="myUserDetailsService">
			<!--  The password encoder is additonally for     -->
			<!--   simulating  a one-time-password mechansim  -->
			<password-encoder ref="passwordEncoder">
				<salt-source user-property="token" />
			</password-encoder>
			
		</authentication-provider>
	</authentication-manager>

	<!-- ====================================================== -->
	<!--           The Implementation of the Interface          -->
	<!--           UserDetailService for the logged in          -->
	<!--                    user and his rights                 -->
	<!-- ====================================================== -->
	<beans:bean id="myUserDetailsService" class="mx.com.hunkabann.skf.policy.PolicyManager">
	</beans:bean>
	<beans:bean id="customAuthenticationProvider" class="mx.com.hunkabann.skf.policy.PolicyManager">
	</beans:bean>

	<!-- ====================================================== -->
	<!--          The Password Encoder who works in the         -->
	<!--             one-time-password mechanism.               -->
	<!-- ====================================================== -->
	<beans:bean id="passwordEncoder" class="mx.com.hunkabann.skf.util.Codificador">
	</beans:bean>
	
	<beans:bean id="authErrorHandler" class="mx.com.hunkabann.skf.policy.AuthentificationListener">
	</beans:bean>
	


</beans:beans>


